<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../docbook/entities.xml">
%docentities;

]>
<!-- Module User's Guide -->

<chapter>

    <title>&adminguide;</title>

    <section>
        <title>Overview</title>
        <para>
            This module provides conectivity and data exchange with Distributed Erlang..
        </para>
    </section>

    <section>
        <title>Dependencies</title>
        <section>
            <title>&kamailio; Modules</title>
            <para>
                The following modules must be loaded before this module:
                <itemizedlist>
                    <listitem>
                        <para>
                            none
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>External Libraries or Applications</title>
            <para>
                The following libraries or applications must be installed before running
                &kamailio; with this module loaded:
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis>epmd</emphasis> - Erlang Port Mapper daemon. ??
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </section>
    <section>
        <title>Exported Parameters</title>
        <section>
            <title><varname>connect</varname> (string)</title>
            <para>
                Set of information required to connect to remote node.
                This is a list of semicolon separated AVP's.
                <itemizedlist>
                    <listitem><para>name - name for connection, this is used in functions to determine where mesage should be passed</para></listitem>
                    <listitem><para>cookie - authorization cookie. Must be the same as in remote node</para></listitem>
                    <listitem><para>node - address of remote node </para></listitem>
                </itemizedlist>
            </para>
            <example>
                <title>Set <varname>connect</varname> parameter</title>
                <programlisting format="linespecific">
...
modparam("erlang","connect","name=con1;cookie=cookie;node=test@localhost")
...
                </programlisting>
            </example>
        </section>
        <section>
            <title><varname>call_route_exit</varname> (int)</title>
            <para>
                If set, exit the execution of the configuration file when a route block is executed by erlang_call_route function.
                If not set script will contininue current route block after returning form route block selected by erlang controller.
                See erlang_call_route function.
            </para>
            <example>
                <title>Set <varname>call_route_exit</varname> parameter</title>
                <programlisting format="linespecific">
...
modparam("erlang","call_route_exit",1)
...
                </programlisting>
            </example>
        </section>
    </section>
    <section>
        <title>Exported Functions</title>
        <section>
            <title>
                <function moreinfo="none">erlang_info(node_name, reg_proc, term)</function>
            </title>
            <para>
                Sends as message to registered process on remote node. Does not expect anything to be sent back.
                Function returns false when node_name is invalid, term does not contain valid PVs,
                after PV expansion does not form a valid erlang term and when message cannot be sent (connection broken).
            </para>
            <para>
                node_name should match a name attribute in one of connect parameters
            </para>
            <para>
                reg_proc is a name of registered process running on remote node
            </para>
            <para>
                term is a string containing Erlang expression to be sent. It may contain pseudo-variables
                which will be expanded before conversion to Erlang Binary Format.
            </para>
            <para>
                term parameter is sent as is to erlang procces. If erlang proccess receiving this message is
                gen_server it will execute handle_info function.
            </para>
            <para>
                This function is equivalent to basic erlang message sending syntax: reg_proc ! term.
            </para>
            <example>
                <title><function>erlang_info</function> usage</title>
                <programlisting format="linespecific">
...
erlang_info("con1","console","\"ok\"");
erlang_info("con1","console","{\"$mb\",\"$rb\"}");
erlang_info("con1","console","{$pp,\"$pr\"}");
erlang_info("con1","console","{\"$timef(%m/%d/%y)\",[{method,'$rm'},{'r-uri',\"$ru\"}]}");
...
                </programlisting>
            </example>
        </section>
        <section>
            <title>
                <function moreinfo="none">erlang_cast(node_name, reg_proc, term)</function>
            </title>
            <para>
                Sends as message to registered process on remote node. Does not expect anything to be sent back.
                Function returns false only when node_name is invalid, term does not contain valid PVs,
                after PV expansion does not form a valid erlang term and when message cannot be sent (connection broken).
            </para>
            <para>
                node_name should match a name attribute in one of connect parameters
            </para>
            <para>
                reg_proc is a name of registered process running on remote node
            </para>
            <para>
                term is a string containing Erlang expression to be sent. It may contain pseudo-variables
                which will be expanded before conversion to Erlang Binary Format.
            </para>
            <para>
                Actual message sent to erlang is {'$erlang_cast',term}. If erlang proccess receiving this message is
                gen_server it will execute handle_cast function.
            </para>
            <para>
                This function is equivalent to gen_server:cast(reg_proc,term).
            </para>
            <example>
                <title><function>erlang_cast</function> usage</title>
                <programlisting format="linespecific">
...
erlang_cast("con1","console","\"ok\"");
erlang_cast("con1","console","{\"$mb\",\"$rb\"}");
erlang_cast("con1","console","{$pp,\"$pr\"}");
erlang_cast("con1","console","{\"$timef(%m/%d/%y)\",[{method,'$rm'},{'r-uri',\"$ru\"}]}");
...
                </programlisting>
            </example>
        </section>
        <section>
            <title>
                <function moreinfo="none">erlang_call(node_name, reg_proc, term, result)</function>
            </title>
            <para>
                Makes a standard gen_server:call to registered gen_server process in erlang VM.
                Function returns false when node_name, result is not valid variable, term does not contain valid PVs,
                after PV expansion does not form a valid erlang term and when message cannot be sent (connection broken).
                Worker proces executing current route block is put on hold using locks until reply from erlang is recveived.
                Then route block is continued within same worker.
            </para>
            <para>
                node_name should match a name attribute in one of connect parameters
            </para>
            <para>
                reg_proc is a name of registered process running on remote node
            </para>
            <para>
                term is a string containing Erlang expression to be sent. It may contain pseudo-variables
                which will be expanded before conversion to Erlang Binary Format.
            </para>
            <para>
                Actual message sent to erlang is {'$erlang_call',term}. If erlang proccess receiving this message is
                gen_server it will execute handle_call function.
            </para>
            <para>
                This function is equivalent to gen_server:call(reg_proc,term).
            </para>
            <example>
                <title><function>erlang_call</function> usage</title>
                <programlisting format="linespecific">
...
erlang_call("con1","route_server","[{method,'$rm'},{'r-uri',\"$ru\"}]", "$var(result)");
...
                </programlisting>
            </example>
        </section>
        <section>
            <title>
                <function moreinfo="none">erlang_call_route(node_name, reg_proc, term, result)</function>
            </title>
            <para>
                This function does exactly like erlang_call, except that it requires that reply from erlang
                is 2-element tuple conatining name of kamailio route to be executed and term to be passed to result variable.
                Purpose of this function is analogous to prefix_route from prefix_route module.
            </para>
            <para>
                node_name should match a name attribute in one of connect parameters
            </para>
            <para>
                reg_proc is a name of registered process running on remote node
            </para>
            <para>
                term is a string containing Erlang expression to be sent. It may contain pseudo-variables
                which will be expanded before conversion to Erlang Binary Format.
            </para>
            <para>
                Actual message sent to erlang is {'$erlang_call',term}. If erlang proccess receiving this message is
                gen_server it will execute handle_call function.
                Your gen_server have to reply with tuple {'route',term}. 'route' have be and atom.
            </para>
            <para>
                This function is equivalent to gen_server:call(reg_proc,term).
            </para>
            <example>
                <title><function>erlang_call</function> usage</title>
                <programlisting format="linespecific">
...
erlang_call_route("con1","route_server","             [{method,'$rm'},{'r-uri',\"$ru\"}]",  "$var(result)");
erlang_call_route("con1","echo_server", "{'ERL_ROUTE',[{method,'$rm'},{'r-uri',\"$ru\"}]}", "$var(result)");
...
                </programlisting>
            </example>
        </section>
        <section>
            <title>
                <function moreinfo="none">erlang_rex(node_name, mod, fun, args, result)</function>
            </title>
            <para>
                Makes a request to Erlang rex server, using the standard Erlang RPC facility.
                Function returns false when node_name, return_route is invalid result is not valid variable,
                or when args or PV expansion of args does not form a valid erlang term.
            </para>
            <para>
                node_name should match a name attribute in one of connect parameters
            </para>
            <para>
                mod fun args - Function to be executed on remote node.
                args should be a valid erlang list [arg1,arg2,arg3], Pseudo-variables can be used.
                If function does not take any arguments an empty list "[]" should be passed.
            </para>
            <para>
                Actual message sent to erlang is {call, mod, fun, args, user}.
                You dont need to create special procces on erlang to handle this message.
                Erlang standard rpc server will handle it, execute function mod:fun(arg1,arg2...)
                and will send back to kamailio any return value 
            </para>
            <para>
                This function is equivalent to rpc:call(reg_proc,mod,fun,args).
                Usage is analogous to erl_call command line tool.
            </para>
            <example>
                <title><function>erlang_rex</function> usage</title>
                <programlisting format="linespecific">
...
erlang_rex("con1", "erlang", "time", "[]", "$var(result)");
erlang_rex("con1", "mymodule", "myfunc", "[\"$au\",\"$ad\"]", "$var(pwd)");
...
                </programlisting>
            </example>
        </section>
    </section>
</chapter>
